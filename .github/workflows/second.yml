name: Build MicroPython for Pico W

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PICO_SDK_VERSION: 1.5.1
  MICROPYTHON_VERSION: v1.23.0

jobs:
  build-firmware:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          gcc-arm-none-eabi \
          libnewlib-arm-none-eabi \
          build-essential \
          libstdc++-arm-none-eabi-newlib

    - name: Configure Environment
      run: |
        # Disable picotool auto-installation
        sed -i '/PICO_SDK_ENABLE_PICOTOOL/d' micropython/lib/pico-sdk/src/CMakeLists.txt
        echo "set(PICO_SDK_ENABLE_PICOTOOL 0)" >> micropython/lib/pico-sdk/src/CMakeLists.txt

        # Create board configuration
        mkdir -p micropython/ports/rp2/boards/RASPBERRY_PI_PICO_W
        cat << EOF > micropython/ports/rp2/boards/RASPBERRY_PI_PICO_W/mpconfigboard.mk
        MICROPY_PY_LWIP = 1
        MICROPY_PY_NETWORK_CYW43 = 1
        MICROPY_PY_BLUETOOTH = 1
        USBD_HID_MOUSE = 1
        USBD_HID_KEYBOARD = 1
        CFLAGS_EXTRA += -DMICROPY_PY_BLUETOOTH_BTSTACK=1
        MICROPY_PY_WEBREPL = 1
        EOF

    - name: Build Firmware
      run: |
        cd micropython/ports/rp2
        cmake -B build -DBOARD=RASPBERRY_PI_PICO_W \
          -DPICO_SDK_PATH=$PWD/../../../lib/pico-sdk \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build build --parallel 4

    - name: Package Artifacts
      run: |
        mkdir -p artifacts
        cp micropython/ports/rp2/build/firmware.uf2 artifacts/micropython-pico2w-$(date +%Y%m%d).uf2
        cp micropython/ports/rp2/build/firmware.elf artifacts/micropython-pico2w-$(date +%Y%m%d).elf

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: firmware-build
        path: artifacts/
        retention-days: 5

    - name: Cleanup
      if: ${{ always() }}
      run: |
        rm -rf artifacts/
        git clean -ffdx
